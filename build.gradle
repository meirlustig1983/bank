plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.mlustig'
sourceCompatibility = '17'
def properties = new Properties()
properties.load(new FileInputStream(file('gradle.properties')))
def currentVersion = properties.getProperty('version', '1.0.6')
version = currentVersion

tasks.register('increaseVersion') {
    doLast {
        def newVersion = currentVersion.tokenize('.').collect { it.toInteger() }
        newVersion[2]++
        version = newVersion.join('.')
        file('gradle.properties').text = "version=${version}"
        println "Version increased to ${version}"
    }
}

// Create a new group named "docker"
def dockerGroup = tasks.create('docker') {
    group = 'docker' // Assign the group to the "docker" category
    description = 'Docker tasks' // Optional: Add a description for the group
}

def version = project.property('version')

def dockerBuild = tasks.create('dockerBuild', Exec) {
    group = 'docker'
    description = 'Build Docker image'
    commandLine 'docker', 'build', '-t', "mlustig/bank-management:$version", '--build-arg', "VERSION=$version", '.'
}

def dockerTagLatest = tasks.create('dockerTagLatest', Exec) {
    group = 'docker'
    description = 'Tag Docker image latest'
    commandLine 'docker', 'tag', "mlustig/bank-management:$version", "mlustig/bank-management:latest"
}

def dockerPublish = tasks.create('dockerPublish', Exec) {
    group = 'docker'
    description = 'Publish Docker image'
    commandLine 'docker', 'push', "mlustig/bank-management:$version"
}

def dockerPublishLatest = tasks.create('dockerPublishLatest', Exec) {
    group = 'docker'
    description = 'Publish Docker image'
    commandLine 'docker', 'push', 'mlustig/bank-management:latest'
}

dockerTagLatest.dependsOn(dockerBuild)
dockerPublish.dependsOn(dockerBuild)
dockerPublishLatest.dependsOn(dockerTagLatest)

tasks.create('dockerBuildPublishVersion') {
    group = 'docker'
    description = 'Build, tag, and publish Docker versionimage'
    dependsOn dockerBuild, dockerPublish
}

tasks.create('dockerBuildPublishLatest') {
    group = 'docker'
    description = 'Build, tag, and publish Docker latest image'
    dependsOn dockerBuild, dockerTagLatest, dockerPublishLatest
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.projectlombok:lombok:1.18.26'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.micrometer:micrometer-registry-prometheus'


    // Validation API
    implementation 'jakarta.validation:jakarta.validation-api:3.0.1'

    // Hibernate Validator
    implementation 'org.hibernate.validator:hibernate-validator:7.0.1.Final'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    implementation('io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:1.25.1')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.1'
    testImplementation 'org.junit.platform:junit-platform-suite-engine:1.9.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('integrationTests', Test) {
    group 'verification'
    useJUnitPlatform {
        includeTags 'integration'
    }
}

tasks.register('unitTests', Test) {
    group 'verification'
    useJUnitPlatform {
        excludeTags 'integration'
    }
}

test {
    useJUnitPlatform {
        excludeTags 'integration'
    }
}
